// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module StreamingMaxPool_Batch_0_StreamingMaxPool_Pre (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_V_TDATA,
        in_V_V_TVALID,
        in_V_V_TREADY,
        out_V_V_TDATA,
        out_V_V_TVALID,
        out_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_V_V_TDATA;
input   in_V_V_TVALID;
output   in_V_V_TREADY;
output  [31:0] out_V_V_TDATA;
output   out_V_V_TVALID;
input   out_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_V_TREADY;
reg out_V_V_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln254_fu_321_p2;
reg    out_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln256_1_reg_996;
reg   [9:0] indvar_flatten_reg_123;
reg   [1:0] buf_V_15_1_reg_134;
reg   [1:0] buf_V_14_1_reg_145;
reg   [1:0] buf_V_13_1_reg_156;
reg   [1:0] buf_V_12_1_reg_167;
reg   [1:0] buf_V_11_1_reg_178;
reg   [1:0] buf_V_10_1_reg_189;
reg   [1:0] buf_V_9_1_reg_200;
reg   [1:0] buf_V_8_1_reg_211;
reg   [1:0] buf_V_7_1_reg_222;
reg   [1:0] buf_V_6_1_reg_233;
reg   [1:0] buf_V_5_1_reg_244;
reg   [1:0] buf_V_4_1_reg_255;
reg   [1:0] buf_V_3_1_reg_266;
reg   [1:0] buf_V_2_1_reg_277;
reg   [1:0] buf_V_1_1_reg_288;
reg   [1:0] buf_V_0_1_reg_299;
reg   [2:0] kx_0_reg_310;
reg   [0:0] icmp_ln254_reg_886;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln254_fu_327_p2;
wire   [1:0] select_ln265_fu_477_p3;
reg   [1:0] select_ln265_reg_895;
wire   [1:0] select_ln265_1_fu_501_p3;
reg   [1:0] select_ln265_1_reg_901;
wire   [1:0] select_ln265_2_fu_525_p3;
reg   [1:0] select_ln265_2_reg_907;
wire   [1:0] select_ln265_3_fu_549_p3;
reg   [1:0] select_ln265_3_reg_913;
wire   [1:0] select_ln265_4_fu_573_p3;
reg   [1:0] select_ln265_4_reg_919;
wire   [1:0] select_ln265_5_fu_597_p3;
reg   [1:0] select_ln265_5_reg_925;
wire   [1:0] select_ln265_6_fu_621_p3;
reg   [1:0] select_ln265_6_reg_931;
wire   [1:0] select_ln265_7_fu_645_p3;
reg   [1:0] select_ln265_7_reg_937;
wire   [1:0] select_ln265_8_fu_669_p3;
reg   [1:0] select_ln265_8_reg_943;
wire   [1:0] select_ln265_9_fu_693_p3;
reg   [1:0] select_ln265_9_reg_949;
wire   [1:0] select_ln265_10_fu_717_p3;
reg   [1:0] select_ln265_10_reg_955;
wire   [1:0] select_ln265_11_fu_741_p3;
reg   [1:0] select_ln265_11_reg_961;
wire   [1:0] select_ln265_12_fu_765_p3;
reg   [1:0] select_ln265_12_reg_967;
wire   [1:0] select_ln265_13_fu_789_p3;
reg   [1:0] select_ln265_13_reg_973;
wire   [1:0] select_ln265_14_fu_813_p3;
reg   [1:0] select_ln265_14_reg_979;
wire   [1:0] select_ln265_15_fu_837_p3;
reg   [1:0] select_ln265_15_reg_985;
wire   [2:0] kx_fu_851_p3;
reg   [2:0] kx_reg_991;
wire   [0:0] icmp_ln256_1_fu_859_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [1:0] ap_phi_mux_buf_V_15_1_phi_fu_138_p4;
reg   [1:0] ap_phi_mux_buf_V_14_1_phi_fu_149_p4;
reg   [1:0] ap_phi_mux_buf_V_13_1_phi_fu_160_p4;
reg   [1:0] ap_phi_mux_buf_V_12_1_phi_fu_171_p4;
reg   [1:0] ap_phi_mux_buf_V_11_1_phi_fu_182_p4;
reg   [1:0] ap_phi_mux_buf_V_10_1_phi_fu_193_p4;
reg   [1:0] ap_phi_mux_buf_V_9_1_phi_fu_204_p4;
reg   [1:0] ap_phi_mux_buf_V_8_1_phi_fu_215_p4;
reg   [1:0] ap_phi_mux_buf_V_7_1_phi_fu_226_p4;
reg   [1:0] ap_phi_mux_buf_V_6_1_phi_fu_237_p4;
reg   [1:0] ap_phi_mux_buf_V_5_1_phi_fu_248_p4;
reg   [1:0] ap_phi_mux_buf_V_4_1_phi_fu_259_p4;
reg   [1:0] ap_phi_mux_buf_V_3_1_phi_fu_270_p4;
reg   [1:0] ap_phi_mux_buf_V_2_1_phi_fu_281_p4;
reg   [1:0] ap_phi_mux_buf_V_1_1_phi_fu_292_p4;
reg   [1:0] ap_phi_mux_buf_V_0_1_phi_fu_303_p4;
reg   [2:0] ap_phi_mux_kx_0_phi_fu_314_p4;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln256_fu_333_p2;
wire   [1:0] buf_0_V_fu_467_p1;
wire   [1:0] select_ln256_15_fu_459_p3;
wire   [0:0] icmp_ln895_fu_471_p2;
wire   [1:0] buf_1_V_fu_485_p4;
wire   [1:0] select_ln256_14_fu_451_p3;
wire   [0:0] icmp_ln895_1_fu_495_p2;
wire   [1:0] buf_2_V_fu_509_p4;
wire   [1:0] select_ln256_13_fu_443_p3;
wire   [0:0] icmp_ln895_2_fu_519_p2;
wire   [1:0] buf_3_V_fu_533_p4;
wire   [1:0] select_ln256_12_fu_435_p3;
wire   [0:0] icmp_ln895_3_fu_543_p2;
wire   [1:0] buf_4_V_fu_557_p4;
wire   [1:0] select_ln256_11_fu_427_p3;
wire   [0:0] icmp_ln895_4_fu_567_p2;
wire   [1:0] buf_5_V_fu_581_p4;
wire   [1:0] select_ln256_10_fu_419_p3;
wire   [0:0] icmp_ln895_5_fu_591_p2;
wire   [1:0] buf_6_V_fu_605_p4;
wire   [1:0] select_ln256_9_fu_411_p3;
wire   [0:0] icmp_ln895_6_fu_615_p2;
wire   [1:0] buf_7_V_fu_629_p4;
wire   [1:0] select_ln256_8_fu_403_p3;
wire   [0:0] icmp_ln895_7_fu_639_p2;
wire   [1:0] buf_8_V_fu_653_p4;
wire   [1:0] select_ln256_7_fu_395_p3;
wire   [0:0] icmp_ln895_8_fu_663_p2;
wire   [1:0] buf_9_V_fu_677_p4;
wire   [1:0] select_ln256_6_fu_387_p3;
wire   [0:0] icmp_ln895_9_fu_687_p2;
wire   [1:0] buf_10_V_fu_701_p4;
wire   [1:0] select_ln256_5_fu_379_p3;
wire   [0:0] icmp_ln895_10_fu_711_p2;
wire   [1:0] buf_11_V_fu_725_p4;
wire   [1:0] select_ln256_4_fu_371_p3;
wire   [0:0] icmp_ln895_11_fu_735_p2;
wire   [1:0] buf_12_V_fu_749_p4;
wire   [1:0] select_ln256_3_fu_363_p3;
wire   [0:0] icmp_ln895_12_fu_759_p2;
wire   [1:0] buf_13_V_fu_773_p4;
wire   [1:0] select_ln256_2_fu_355_p3;
wire   [0:0] icmp_ln895_13_fu_783_p2;
wire   [1:0] buf_14_V_fu_797_p4;
wire   [1:0] select_ln256_1_fu_347_p3;
wire   [0:0] icmp_ln895_14_fu_807_p2;
wire   [1:0] buf_15_V_fu_821_p4;
wire   [1:0] select_ln256_fu_339_p3;
wire   [0:0] icmp_ln895_15_fu_831_p2;
wire   [2:0] add_ln256_fu_845_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_0_1_reg_299 <= select_ln265_reg_895;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_0_1_reg_299 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_10_1_reg_189 <= select_ln265_10_reg_955;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_10_1_reg_189 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_11_1_reg_178 <= select_ln265_11_reg_961;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_11_1_reg_178 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_12_1_reg_167 <= select_ln265_12_reg_967;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_12_1_reg_167 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_13_1_reg_156 <= select_ln265_13_reg_973;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_13_1_reg_156 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_14_1_reg_145 <= select_ln265_14_reg_979;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_14_1_reg_145 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_15_1_reg_134 <= select_ln265_15_reg_985;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_15_1_reg_134 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_1_1_reg_288 <= select_ln265_1_reg_901;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_1_1_reg_288 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_2_1_reg_277 <= select_ln265_2_reg_907;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_2_1_reg_277 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_3_1_reg_266 <= select_ln265_3_reg_913;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_3_1_reg_266 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_4_1_reg_255 <= select_ln265_4_reg_919;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_4_1_reg_255 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_5_1_reg_244 <= select_ln265_5_reg_925;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_5_1_reg_244 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_6_1_reg_233 <= select_ln265_6_reg_931;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_6_1_reg_233 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_7_1_reg_222 <= select_ln265_7_reg_937;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_7_1_reg_222 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_8_1_reg_211 <= select_ln265_8_reg_943;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_8_1_reg_211 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_9_1_reg_200 <= select_ln265_9_reg_949;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_9_1_reg_200 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_fu_321_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_123 <= add_ln254_fu_327_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_123 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kx_0_reg_310 <= kx_reg_991;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        kx_0_reg_310 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln254_reg_886 <= icmp_ln254_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_fu_321_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln256_1_reg_996 <= icmp_ln256_1_fu_859_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_fu_321_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kx_reg_991 <= kx_fu_851_p3;
        select_ln265_10_reg_955 <= select_ln265_10_fu_717_p3;
        select_ln265_11_reg_961 <= select_ln265_11_fu_741_p3;
        select_ln265_12_reg_967 <= select_ln265_12_fu_765_p3;
        select_ln265_13_reg_973 <= select_ln265_13_fu_789_p3;
        select_ln265_14_reg_979 <= select_ln265_14_fu_813_p3;
        select_ln265_15_reg_985 <= select_ln265_15_fu_837_p3;
        select_ln265_1_reg_901 <= select_ln265_1_fu_501_p3;
        select_ln265_2_reg_907 <= select_ln265_2_fu_525_p3;
        select_ln265_3_reg_913 <= select_ln265_3_fu_549_p3;
        select_ln265_4_reg_919 <= select_ln265_4_fu_573_p3;
        select_ln265_5_reg_925 <= select_ln265_5_fu_597_p3;
        select_ln265_6_reg_931 <= select_ln265_6_fu_621_p3;
        select_ln265_7_reg_937 <= select_ln265_7_fu_645_p3;
        select_ln265_8_reg_943 <= select_ln265_8_fu_669_p3;
        select_ln265_9_reg_949 <= select_ln265_9_fu_693_p3;
        select_ln265_reg_895 <= select_ln265_fu_477_p3;
    end
end

always @ (*) begin
    if ((icmp_ln254_fu_321_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_0_1_phi_fu_303_p4 = select_ln265_reg_895;
    end else begin
        ap_phi_mux_buf_V_0_1_phi_fu_303_p4 = buf_V_0_1_reg_299;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_10_1_phi_fu_193_p4 = select_ln265_10_reg_955;
    end else begin
        ap_phi_mux_buf_V_10_1_phi_fu_193_p4 = buf_V_10_1_reg_189;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_11_1_phi_fu_182_p4 = select_ln265_11_reg_961;
    end else begin
        ap_phi_mux_buf_V_11_1_phi_fu_182_p4 = buf_V_11_1_reg_178;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_12_1_phi_fu_171_p4 = select_ln265_12_reg_967;
    end else begin
        ap_phi_mux_buf_V_12_1_phi_fu_171_p4 = buf_V_12_1_reg_167;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_13_1_phi_fu_160_p4 = select_ln265_13_reg_973;
    end else begin
        ap_phi_mux_buf_V_13_1_phi_fu_160_p4 = buf_V_13_1_reg_156;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_14_1_phi_fu_149_p4 = select_ln265_14_reg_979;
    end else begin
        ap_phi_mux_buf_V_14_1_phi_fu_149_p4 = buf_V_14_1_reg_145;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_15_1_phi_fu_138_p4 = select_ln265_15_reg_985;
    end else begin
        ap_phi_mux_buf_V_15_1_phi_fu_138_p4 = buf_V_15_1_reg_134;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_1_1_phi_fu_292_p4 = select_ln265_1_reg_901;
    end else begin
        ap_phi_mux_buf_V_1_1_phi_fu_292_p4 = buf_V_1_1_reg_288;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_2_1_phi_fu_281_p4 = select_ln265_2_reg_907;
    end else begin
        ap_phi_mux_buf_V_2_1_phi_fu_281_p4 = buf_V_2_1_reg_277;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_3_1_phi_fu_270_p4 = select_ln265_3_reg_913;
    end else begin
        ap_phi_mux_buf_V_3_1_phi_fu_270_p4 = buf_V_3_1_reg_266;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_4_1_phi_fu_259_p4 = select_ln265_4_reg_919;
    end else begin
        ap_phi_mux_buf_V_4_1_phi_fu_259_p4 = buf_V_4_1_reg_255;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_5_1_phi_fu_248_p4 = select_ln265_5_reg_925;
    end else begin
        ap_phi_mux_buf_V_5_1_phi_fu_248_p4 = buf_V_5_1_reg_244;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_6_1_phi_fu_237_p4 = select_ln265_6_reg_931;
    end else begin
        ap_phi_mux_buf_V_6_1_phi_fu_237_p4 = buf_V_6_1_reg_233;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_7_1_phi_fu_226_p4 = select_ln265_7_reg_937;
    end else begin
        ap_phi_mux_buf_V_7_1_phi_fu_226_p4 = buf_V_7_1_reg_222;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_8_1_phi_fu_215_p4 = select_ln265_8_reg_943;
    end else begin
        ap_phi_mux_buf_V_8_1_phi_fu_215_p4 = buf_V_8_1_reg_211;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_9_1_phi_fu_204_p4 = select_ln265_9_reg_949;
    end else begin
        ap_phi_mux_buf_V_9_1_phi_fu_204_p4 = buf_V_9_1_reg_200;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_kx_0_phi_fu_314_p4 = kx_reg_991;
    end else begin
        ap_phi_mux_kx_0_phi_fu_314_p4 = kx_0_reg_310;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln254_fu_321_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_TDATA_blk_n = in_V_V_TVALID;
    end else begin
        in_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln254_fu_321_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_TREADY = 1'b1;
    end else begin
        in_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln256_1_reg_996 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_V_TDATA_blk_n = out_V_V_TREADY;
    end else begin
        out_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln256_1_reg_996 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_TVALID = 1'b1;
    end else begin
        out_V_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln254_fu_321_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln254_fu_321_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln254_fu_327_p2 = (indvar_flatten_reg_123 + 10'd1);

assign add_ln256_fu_845_p2 = (3'd1 + ap_phi_mux_kx_0_phi_fu_314_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln254_fu_321_p2 == 1'd0) & (in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((icmp_ln254_fu_321_p2 == 1'd0) & (in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((icmp_ln254_fu_321_p2 == 1'd0) & (in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln254_fu_321_p2 == 1'd0) & (in_V_V_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln256_1_reg_996 == 1'd1) & (out_V_V_TREADY == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buf_0_V_fu_467_p1 = in_V_V_TDATA[1:0];

assign buf_10_V_fu_701_p4 = {{in_V_V_TDATA[21:20]}};

assign buf_11_V_fu_725_p4 = {{in_V_V_TDATA[23:22]}};

assign buf_12_V_fu_749_p4 = {{in_V_V_TDATA[25:24]}};

assign buf_13_V_fu_773_p4 = {{in_V_V_TDATA[27:26]}};

assign buf_14_V_fu_797_p4 = {{in_V_V_TDATA[29:28]}};

assign buf_15_V_fu_821_p4 = {{in_V_V_TDATA[31:30]}};

assign buf_1_V_fu_485_p4 = {{in_V_V_TDATA[3:2]}};

assign buf_2_V_fu_509_p4 = {{in_V_V_TDATA[5:4]}};

assign buf_3_V_fu_533_p4 = {{in_V_V_TDATA[7:6]}};

assign buf_4_V_fu_557_p4 = {{in_V_V_TDATA[9:8]}};

assign buf_5_V_fu_581_p4 = {{in_V_V_TDATA[11:10]}};

assign buf_6_V_fu_605_p4 = {{in_V_V_TDATA[13:12]}};

assign buf_7_V_fu_629_p4 = {{in_V_V_TDATA[15:14]}};

assign buf_8_V_fu_653_p4 = {{in_V_V_TDATA[17:16]}};

assign buf_9_V_fu_677_p4 = {{in_V_V_TDATA[19:18]}};

assign icmp_ln254_fu_321_p2 = ((indvar_flatten_reg_123 == 10'd776) ? 1'b1 : 1'b0);

assign icmp_ln256_1_fu_859_p2 = ((kx_fu_851_p3 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln256_fu_333_p2 = ((ap_phi_mux_kx_0_phi_fu_314_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln895_10_fu_711_p2 = ((buf_10_V_fu_701_p4 > select_ln256_5_fu_379_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_11_fu_735_p2 = ((buf_11_V_fu_725_p4 > select_ln256_4_fu_371_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_12_fu_759_p2 = ((buf_12_V_fu_749_p4 > select_ln256_3_fu_363_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_13_fu_783_p2 = ((buf_13_V_fu_773_p4 > select_ln256_2_fu_355_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_14_fu_807_p2 = ((buf_14_V_fu_797_p4 > select_ln256_1_fu_347_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_15_fu_831_p2 = ((buf_15_V_fu_821_p4 > select_ln256_fu_339_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_495_p2 = ((buf_1_V_fu_485_p4 > select_ln256_14_fu_451_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_2_fu_519_p2 = ((buf_2_V_fu_509_p4 > select_ln256_13_fu_443_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_3_fu_543_p2 = ((buf_3_V_fu_533_p4 > select_ln256_12_fu_435_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_4_fu_567_p2 = ((buf_4_V_fu_557_p4 > select_ln256_11_fu_427_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_5_fu_591_p2 = ((buf_5_V_fu_581_p4 > select_ln256_10_fu_419_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_6_fu_615_p2 = ((buf_6_V_fu_605_p4 > select_ln256_9_fu_411_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_7_fu_639_p2 = ((buf_7_V_fu_629_p4 > select_ln256_8_fu_403_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_8_fu_663_p2 = ((buf_8_V_fu_653_p4 > select_ln256_7_fu_395_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_9_fu_687_p2 = ((buf_9_V_fu_677_p4 > select_ln256_6_fu_387_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_471_p2 = ((buf_0_V_fu_467_p1 > select_ln256_15_fu_459_p3) ? 1'b1 : 1'b0);

assign kx_fu_851_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 3'd1 : add_ln256_fu_845_p2);

assign out_V_V_TDATA = {{{{{{{{{{{{{{{{select_ln265_15_reg_985}, {select_ln265_14_reg_979}}, {select_ln265_13_reg_973}}, {select_ln265_12_reg_967}}, {select_ln265_11_reg_961}}, {select_ln265_10_reg_955}}, {select_ln265_9_reg_949}}, {select_ln265_8_reg_943}}, {select_ln265_7_reg_937}}, {select_ln265_6_reg_931}}, {select_ln265_5_reg_925}}, {select_ln265_4_reg_919}}, {select_ln265_3_reg_913}}, {select_ln265_2_reg_907}}, {select_ln265_1_reg_901}}, {select_ln265_reg_895}};

assign select_ln256_10_fu_419_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_5_1_phi_fu_248_p4);

assign select_ln256_11_fu_427_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_4_1_phi_fu_259_p4);

assign select_ln256_12_fu_435_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_3_1_phi_fu_270_p4);

assign select_ln256_13_fu_443_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_2_1_phi_fu_281_p4);

assign select_ln256_14_fu_451_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_1_1_phi_fu_292_p4);

assign select_ln256_15_fu_459_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_0_1_phi_fu_303_p4);

assign select_ln256_1_fu_347_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_14_1_phi_fu_149_p4);

assign select_ln256_2_fu_355_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_13_1_phi_fu_160_p4);

assign select_ln256_3_fu_363_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_12_1_phi_fu_171_p4);

assign select_ln256_4_fu_371_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_11_1_phi_fu_182_p4);

assign select_ln256_5_fu_379_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_10_1_phi_fu_193_p4);

assign select_ln256_6_fu_387_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_9_1_phi_fu_204_p4);

assign select_ln256_7_fu_395_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_8_1_phi_fu_215_p4);

assign select_ln256_8_fu_403_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_7_1_phi_fu_226_p4);

assign select_ln256_9_fu_411_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_6_1_phi_fu_237_p4);

assign select_ln256_fu_339_p3 = ((icmp_ln256_fu_333_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_15_1_phi_fu_138_p4);

assign select_ln265_10_fu_717_p3 = ((icmp_ln895_10_fu_711_p2[0:0] === 1'b1) ? buf_10_V_fu_701_p4 : select_ln256_5_fu_379_p3);

assign select_ln265_11_fu_741_p3 = ((icmp_ln895_11_fu_735_p2[0:0] === 1'b1) ? buf_11_V_fu_725_p4 : select_ln256_4_fu_371_p3);

assign select_ln265_12_fu_765_p3 = ((icmp_ln895_12_fu_759_p2[0:0] === 1'b1) ? buf_12_V_fu_749_p4 : select_ln256_3_fu_363_p3);

assign select_ln265_13_fu_789_p3 = ((icmp_ln895_13_fu_783_p2[0:0] === 1'b1) ? buf_13_V_fu_773_p4 : select_ln256_2_fu_355_p3);

assign select_ln265_14_fu_813_p3 = ((icmp_ln895_14_fu_807_p2[0:0] === 1'b1) ? buf_14_V_fu_797_p4 : select_ln256_1_fu_347_p3);

assign select_ln265_15_fu_837_p3 = ((icmp_ln895_15_fu_831_p2[0:0] === 1'b1) ? buf_15_V_fu_821_p4 : select_ln256_fu_339_p3);

assign select_ln265_1_fu_501_p3 = ((icmp_ln895_1_fu_495_p2[0:0] === 1'b1) ? buf_1_V_fu_485_p4 : select_ln256_14_fu_451_p3);

assign select_ln265_2_fu_525_p3 = ((icmp_ln895_2_fu_519_p2[0:0] === 1'b1) ? buf_2_V_fu_509_p4 : select_ln256_13_fu_443_p3);

assign select_ln265_3_fu_549_p3 = ((icmp_ln895_3_fu_543_p2[0:0] === 1'b1) ? buf_3_V_fu_533_p4 : select_ln256_12_fu_435_p3);

assign select_ln265_4_fu_573_p3 = ((icmp_ln895_4_fu_567_p2[0:0] === 1'b1) ? buf_4_V_fu_557_p4 : select_ln256_11_fu_427_p3);

assign select_ln265_5_fu_597_p3 = ((icmp_ln895_5_fu_591_p2[0:0] === 1'b1) ? buf_5_V_fu_581_p4 : select_ln256_10_fu_419_p3);

assign select_ln265_6_fu_621_p3 = ((icmp_ln895_6_fu_615_p2[0:0] === 1'b1) ? buf_6_V_fu_605_p4 : select_ln256_9_fu_411_p3);

assign select_ln265_7_fu_645_p3 = ((icmp_ln895_7_fu_639_p2[0:0] === 1'b1) ? buf_7_V_fu_629_p4 : select_ln256_8_fu_403_p3);

assign select_ln265_8_fu_669_p3 = ((icmp_ln895_8_fu_663_p2[0:0] === 1'b1) ? buf_8_V_fu_653_p4 : select_ln256_7_fu_395_p3);

assign select_ln265_9_fu_693_p3 = ((icmp_ln895_9_fu_687_p2[0:0] === 1'b1) ? buf_9_V_fu_677_p4 : select_ln256_6_fu_387_p3);

assign select_ln265_fu_477_p3 = ((icmp_ln895_fu_471_p2[0:0] === 1'b1) ? buf_0_V_fu_467_p1 : select_ln256_15_fu_459_p3);

endmodule //StreamingMaxPool_Batch_0_StreamingMaxPool_Pre
