// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module StreamingMaxPool_Batch_2_StreamingMaxPool_Pre (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_V_TDATA,
        in_V_V_TVALID,
        in_V_V_TREADY,
        out_V_V_TDATA,
        out_V_V_TVALID,
        out_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] in_V_V_TDATA;
input   in_V_V_TVALID;
output   in_V_V_TREADY;
output  [63:0] out_V_V_TDATA;
output   out_V_V_TVALID;
input   out_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_V_TREADY;
reg out_V_V_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln254_fu_531_p2;
reg    out_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln256_1_reg_1756;
reg   [4:0] indvar_flatten_reg_179;
reg   [1:0] buf_V_29_1_reg_190;
reg   [1:0] buf_V_28_1_reg_201;
reg   [1:0] buf_V_27_1_reg_212;
reg   [1:0] buf_V_26_1_reg_223;
reg   [1:0] buf_V_25_1_reg_234;
reg   [1:0] buf_V_24_1_reg_245;
reg   [1:0] buf_V_23_1_reg_256;
reg   [1:0] buf_V_22_1_reg_267;
reg   [1:0] buf_V_21_1_reg_278;
reg   [1:0] buf_V_20_1_reg_289;
reg   [1:0] buf_V_19_1_reg_300;
reg   [1:0] buf_V_18_1_reg_311;
reg   [1:0] buf_V_17_1_reg_322;
reg   [1:0] buf_V_16_1_reg_333;
reg   [1:0] buf_V_15_1_reg_344;
reg   [1:0] buf_V_14_1_reg_355;
reg   [1:0] buf_V_13_1_reg_366;
reg   [1:0] buf_V_12_1_reg_377;
reg   [1:0] buf_V_11_1_reg_388;
reg   [1:0] buf_V_10_1_reg_399;
reg   [1:0] buf_V_9_1_reg_410;
reg   [1:0] buf_V_8_1_reg_421;
reg   [1:0] buf_V_7_1_reg_432;
reg   [1:0] buf_V_6_1_reg_443;
reg   [1:0] buf_V_5_1_reg_454;
reg   [1:0] buf_V_4_1_reg_465;
reg   [1:0] buf_V_3_1_reg_476;
reg   [1:0] buf_V_2_1_reg_487;
reg   [1:0] buf_V_1_1_reg_498;
reg   [1:0] buf_V_0_1_reg_509;
reg   [2:0] kx_0_reg_520;
reg   [0:0] icmp_ln254_reg_1562;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] add_ln254_fu_537_p2;
wire   [1:0] select_ln265_fu_799_p3;
reg   [1:0] select_ln265_reg_1571;
wire   [1:0] select_ln265_1_fu_823_p3;
reg   [1:0] select_ln265_1_reg_1577;
wire   [1:0] select_ln265_2_fu_847_p3;
reg   [1:0] select_ln265_2_reg_1583;
wire   [1:0] select_ln265_3_fu_871_p3;
reg   [1:0] select_ln265_3_reg_1589;
wire   [1:0] select_ln265_4_fu_895_p3;
reg   [1:0] select_ln265_4_reg_1595;
wire   [1:0] select_ln265_5_fu_919_p3;
reg   [1:0] select_ln265_5_reg_1601;
wire   [1:0] select_ln265_6_fu_943_p3;
reg   [1:0] select_ln265_6_reg_1607;
wire   [1:0] select_ln265_7_fu_967_p3;
reg   [1:0] select_ln265_7_reg_1613;
wire   [1:0] select_ln265_8_fu_991_p3;
reg   [1:0] select_ln265_8_reg_1619;
wire   [1:0] select_ln265_9_fu_1015_p3;
reg   [1:0] select_ln265_9_reg_1625;
wire   [1:0] select_ln265_10_fu_1039_p3;
reg   [1:0] select_ln265_10_reg_1631;
wire   [1:0] select_ln265_11_fu_1063_p3;
reg   [1:0] select_ln265_11_reg_1637;
wire   [1:0] select_ln265_12_fu_1087_p3;
reg   [1:0] select_ln265_12_reg_1643;
wire   [1:0] select_ln265_13_fu_1111_p3;
reg   [1:0] select_ln265_13_reg_1649;
wire   [1:0] select_ln265_14_fu_1135_p3;
reg   [1:0] select_ln265_14_reg_1655;
wire   [1:0] select_ln265_15_fu_1159_p3;
reg   [1:0] select_ln265_15_reg_1661;
wire   [1:0] select_ln265_16_fu_1183_p3;
reg   [1:0] select_ln265_16_reg_1667;
wire   [1:0] select_ln265_17_fu_1207_p3;
reg   [1:0] select_ln265_17_reg_1673;
wire   [1:0] select_ln265_18_fu_1231_p3;
reg   [1:0] select_ln265_18_reg_1679;
wire   [1:0] select_ln265_19_fu_1255_p3;
reg   [1:0] select_ln265_19_reg_1685;
wire   [1:0] select_ln265_20_fu_1279_p3;
reg   [1:0] select_ln265_20_reg_1691;
wire   [1:0] select_ln265_21_fu_1303_p3;
reg   [1:0] select_ln265_21_reg_1697;
wire   [1:0] select_ln265_22_fu_1327_p3;
reg   [1:0] select_ln265_22_reg_1703;
wire   [1:0] select_ln265_23_fu_1351_p3;
reg   [1:0] select_ln265_23_reg_1709;
wire   [1:0] select_ln265_24_fu_1375_p3;
reg   [1:0] select_ln265_24_reg_1715;
wire   [1:0] select_ln265_25_fu_1399_p3;
reg   [1:0] select_ln265_25_reg_1721;
wire   [1:0] select_ln265_26_fu_1423_p3;
reg   [1:0] select_ln265_26_reg_1727;
wire   [1:0] select_ln265_27_fu_1447_p3;
reg   [1:0] select_ln265_27_reg_1733;
wire   [1:0] select_ln265_28_fu_1471_p3;
reg   [1:0] select_ln265_28_reg_1739;
wire   [1:0] select_ln265_29_fu_1495_p3;
reg   [1:0] select_ln265_29_reg_1745;
wire   [2:0] kx_fu_1509_p3;
reg   [2:0] kx_reg_1751;
wire   [0:0] icmp_ln256_1_fu_1517_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [1:0] ap_phi_mux_buf_V_29_1_phi_fu_194_p4;
reg   [1:0] ap_phi_mux_buf_V_28_1_phi_fu_205_p4;
reg   [1:0] ap_phi_mux_buf_V_27_1_phi_fu_216_p4;
reg   [1:0] ap_phi_mux_buf_V_26_1_phi_fu_227_p4;
reg   [1:0] ap_phi_mux_buf_V_25_1_phi_fu_238_p4;
reg   [1:0] ap_phi_mux_buf_V_24_1_phi_fu_249_p4;
reg   [1:0] ap_phi_mux_buf_V_23_1_phi_fu_260_p4;
reg   [1:0] ap_phi_mux_buf_V_22_1_phi_fu_271_p4;
reg   [1:0] ap_phi_mux_buf_V_21_1_phi_fu_282_p4;
reg   [1:0] ap_phi_mux_buf_V_20_1_phi_fu_293_p4;
reg   [1:0] ap_phi_mux_buf_V_19_1_phi_fu_304_p4;
reg   [1:0] ap_phi_mux_buf_V_18_1_phi_fu_315_p4;
reg   [1:0] ap_phi_mux_buf_V_17_1_phi_fu_326_p4;
reg   [1:0] ap_phi_mux_buf_V_16_1_phi_fu_337_p4;
reg   [1:0] ap_phi_mux_buf_V_15_1_phi_fu_348_p4;
reg   [1:0] ap_phi_mux_buf_V_14_1_phi_fu_359_p4;
reg   [1:0] ap_phi_mux_buf_V_13_1_phi_fu_370_p4;
reg   [1:0] ap_phi_mux_buf_V_12_1_phi_fu_381_p4;
reg   [1:0] ap_phi_mux_buf_V_11_1_phi_fu_392_p4;
reg   [1:0] ap_phi_mux_buf_V_10_1_phi_fu_403_p4;
reg   [1:0] ap_phi_mux_buf_V_9_1_phi_fu_414_p4;
reg   [1:0] ap_phi_mux_buf_V_8_1_phi_fu_425_p4;
reg   [1:0] ap_phi_mux_buf_V_7_1_phi_fu_436_p4;
reg   [1:0] ap_phi_mux_buf_V_6_1_phi_fu_447_p4;
reg   [1:0] ap_phi_mux_buf_V_5_1_phi_fu_458_p4;
reg   [1:0] ap_phi_mux_buf_V_4_1_phi_fu_469_p4;
reg   [1:0] ap_phi_mux_buf_V_3_1_phi_fu_480_p4;
reg   [1:0] ap_phi_mux_buf_V_2_1_phi_fu_491_p4;
reg   [1:0] ap_phi_mux_buf_V_1_1_phi_fu_502_p4;
reg   [1:0] ap_phi_mux_buf_V_0_1_phi_fu_513_p4;
reg   [2:0] ap_phi_mux_kx_0_phi_fu_524_p4;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln256_fu_543_p2;
wire   [1:0] buf_0_V_fu_789_p1;
wire   [1:0] select_ln256_29_fu_781_p3;
wire   [0:0] icmp_ln895_fu_793_p2;
wire   [1:0] buf_1_V_fu_807_p4;
wire   [1:0] select_ln256_28_fu_773_p3;
wire   [0:0] icmp_ln895_1_fu_817_p2;
wire   [1:0] buf_2_V_fu_831_p4;
wire   [1:0] select_ln256_27_fu_765_p3;
wire   [0:0] icmp_ln895_2_fu_841_p2;
wire   [1:0] buf_3_V_fu_855_p4;
wire   [1:0] select_ln256_26_fu_757_p3;
wire   [0:0] icmp_ln895_3_fu_865_p2;
wire   [1:0] buf_4_V_fu_879_p4;
wire   [1:0] select_ln256_25_fu_749_p3;
wire   [0:0] icmp_ln895_4_fu_889_p2;
wire   [1:0] buf_5_V_fu_903_p4;
wire   [1:0] select_ln256_24_fu_741_p3;
wire   [0:0] icmp_ln895_5_fu_913_p2;
wire   [1:0] buf_6_V_fu_927_p4;
wire   [1:0] select_ln256_23_fu_733_p3;
wire   [0:0] icmp_ln895_6_fu_937_p2;
wire   [1:0] buf_7_V_fu_951_p4;
wire   [1:0] select_ln256_22_fu_725_p3;
wire   [0:0] icmp_ln895_7_fu_961_p2;
wire   [1:0] buf_8_V_fu_975_p4;
wire   [1:0] select_ln256_21_fu_717_p3;
wire   [0:0] icmp_ln895_8_fu_985_p2;
wire   [1:0] buf_9_V_fu_999_p4;
wire   [1:0] select_ln256_20_fu_709_p3;
wire   [0:0] icmp_ln895_9_fu_1009_p2;
wire   [1:0] buf_10_V_fu_1023_p4;
wire   [1:0] select_ln256_19_fu_701_p3;
wire   [0:0] icmp_ln895_10_fu_1033_p2;
wire   [1:0] buf_11_V_fu_1047_p4;
wire   [1:0] select_ln256_18_fu_693_p3;
wire   [0:0] icmp_ln895_11_fu_1057_p2;
wire   [1:0] buf_12_V_fu_1071_p4;
wire   [1:0] select_ln256_17_fu_685_p3;
wire   [0:0] icmp_ln895_12_fu_1081_p2;
wire   [1:0] buf_13_V_fu_1095_p4;
wire   [1:0] select_ln256_16_fu_677_p3;
wire   [0:0] icmp_ln895_13_fu_1105_p2;
wire   [1:0] buf_14_V_fu_1119_p4;
wire   [1:0] select_ln256_15_fu_669_p3;
wire   [0:0] icmp_ln895_14_fu_1129_p2;
wire   [1:0] buf_15_V_fu_1143_p4;
wire   [1:0] select_ln256_14_fu_661_p3;
wire   [0:0] icmp_ln895_15_fu_1153_p2;
wire   [1:0] buf_16_V_fu_1167_p4;
wire   [1:0] select_ln256_13_fu_653_p3;
wire   [0:0] icmp_ln895_16_fu_1177_p2;
wire   [1:0] buf_17_V_fu_1191_p4;
wire   [1:0] select_ln256_12_fu_645_p3;
wire   [0:0] icmp_ln895_17_fu_1201_p2;
wire   [1:0] buf_18_V_fu_1215_p4;
wire   [1:0] select_ln256_11_fu_637_p3;
wire   [0:0] icmp_ln895_18_fu_1225_p2;
wire   [1:0] buf_19_V_fu_1239_p4;
wire   [1:0] select_ln256_10_fu_629_p3;
wire   [0:0] icmp_ln895_19_fu_1249_p2;
wire   [1:0] buf_20_V_fu_1263_p4;
wire   [1:0] select_ln256_9_fu_621_p3;
wire   [0:0] icmp_ln895_20_fu_1273_p2;
wire   [1:0] buf_21_V_fu_1287_p4;
wire   [1:0] select_ln256_8_fu_613_p3;
wire   [0:0] icmp_ln895_21_fu_1297_p2;
wire   [1:0] buf_22_V_fu_1311_p4;
wire   [1:0] select_ln256_7_fu_605_p3;
wire   [0:0] icmp_ln895_22_fu_1321_p2;
wire   [1:0] buf_23_V_fu_1335_p4;
wire   [1:0] select_ln256_6_fu_597_p3;
wire   [0:0] icmp_ln895_23_fu_1345_p2;
wire   [1:0] buf_24_V_fu_1359_p4;
wire   [1:0] select_ln256_5_fu_589_p3;
wire   [0:0] icmp_ln895_24_fu_1369_p2;
wire   [1:0] buf_25_V_fu_1383_p4;
wire   [1:0] select_ln256_4_fu_581_p3;
wire   [0:0] icmp_ln895_25_fu_1393_p2;
wire   [1:0] buf_26_V_fu_1407_p4;
wire   [1:0] select_ln256_3_fu_573_p3;
wire   [0:0] icmp_ln895_26_fu_1417_p2;
wire   [1:0] buf_27_V_fu_1431_p4;
wire   [1:0] select_ln256_2_fu_565_p3;
wire   [0:0] icmp_ln895_27_fu_1441_p2;
wire   [1:0] buf_28_V_fu_1455_p4;
wire   [1:0] select_ln256_1_fu_557_p3;
wire   [0:0] icmp_ln895_28_fu_1465_p2;
wire   [1:0] buf_29_V_fu_1479_p4;
wire   [1:0] select_ln256_fu_549_p3;
wire   [0:0] icmp_ln895_29_fu_1489_p2;
wire   [2:0] add_ln256_fu_1503_p2;
wire   [59:0] tmp_V_fu_1523_p31;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_0_1_reg_509 <= select_ln265_reg_1571;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_0_1_reg_509 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_10_1_reg_399 <= select_ln265_10_reg_1631;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_10_1_reg_399 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_11_1_reg_388 <= select_ln265_11_reg_1637;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_11_1_reg_388 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_12_1_reg_377 <= select_ln265_12_reg_1643;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_12_1_reg_377 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_13_1_reg_366 <= select_ln265_13_reg_1649;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_13_1_reg_366 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_14_1_reg_355 <= select_ln265_14_reg_1655;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_14_1_reg_355 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_15_1_reg_344 <= select_ln265_15_reg_1661;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_15_1_reg_344 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_16_1_reg_333 <= select_ln265_16_reg_1667;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_16_1_reg_333 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_17_1_reg_322 <= select_ln265_17_reg_1673;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_17_1_reg_322 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_18_1_reg_311 <= select_ln265_18_reg_1679;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_18_1_reg_311 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_19_1_reg_300 <= select_ln265_19_reg_1685;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_19_1_reg_300 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_1_1_reg_498 <= select_ln265_1_reg_1577;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_1_1_reg_498 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_20_1_reg_289 <= select_ln265_20_reg_1691;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_20_1_reg_289 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_21_1_reg_278 <= select_ln265_21_reg_1697;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_21_1_reg_278 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_22_1_reg_267 <= select_ln265_22_reg_1703;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_22_1_reg_267 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_23_1_reg_256 <= select_ln265_23_reg_1709;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_23_1_reg_256 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_24_1_reg_245 <= select_ln265_24_reg_1715;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_24_1_reg_245 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_25_1_reg_234 <= select_ln265_25_reg_1721;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_25_1_reg_234 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_26_1_reg_223 <= select_ln265_26_reg_1727;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_26_1_reg_223 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_27_1_reg_212 <= select_ln265_27_reg_1733;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_27_1_reg_212 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_28_1_reg_201 <= select_ln265_28_reg_1739;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_28_1_reg_201 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_29_1_reg_190 <= select_ln265_29_reg_1745;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_29_1_reg_190 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_2_1_reg_487 <= select_ln265_2_reg_1583;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_2_1_reg_487 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_3_1_reg_476 <= select_ln265_3_reg_1589;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_3_1_reg_476 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_4_1_reg_465 <= select_ln265_4_reg_1595;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_4_1_reg_465 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_5_1_reg_454 <= select_ln265_5_reg_1601;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_5_1_reg_454 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_6_1_reg_443 <= select_ln265_6_reg_1607;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_6_1_reg_443 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_7_1_reg_432 <= select_ln265_7_reg_1613;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_7_1_reg_432 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_8_1_reg_421 <= select_ln265_8_reg_1619;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_8_1_reg_421 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_9_1_reg_410 <= select_ln265_9_reg_1625;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_9_1_reg_410 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_fu_531_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_179 <= add_ln254_fu_537_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_179 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kx_0_reg_520 <= kx_reg_1751;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        kx_0_reg_520 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln254_reg_1562 <= icmp_ln254_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_fu_531_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln256_1_reg_1756 <= icmp_ln256_1_fu_1517_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_fu_531_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kx_reg_1751 <= kx_fu_1509_p3;
        select_ln265_10_reg_1631 <= select_ln265_10_fu_1039_p3;
        select_ln265_11_reg_1637 <= select_ln265_11_fu_1063_p3;
        select_ln265_12_reg_1643 <= select_ln265_12_fu_1087_p3;
        select_ln265_13_reg_1649 <= select_ln265_13_fu_1111_p3;
        select_ln265_14_reg_1655 <= select_ln265_14_fu_1135_p3;
        select_ln265_15_reg_1661 <= select_ln265_15_fu_1159_p3;
        select_ln265_16_reg_1667 <= select_ln265_16_fu_1183_p3;
        select_ln265_17_reg_1673 <= select_ln265_17_fu_1207_p3;
        select_ln265_18_reg_1679 <= select_ln265_18_fu_1231_p3;
        select_ln265_19_reg_1685 <= select_ln265_19_fu_1255_p3;
        select_ln265_1_reg_1577 <= select_ln265_1_fu_823_p3;
        select_ln265_20_reg_1691 <= select_ln265_20_fu_1279_p3;
        select_ln265_21_reg_1697 <= select_ln265_21_fu_1303_p3;
        select_ln265_22_reg_1703 <= select_ln265_22_fu_1327_p3;
        select_ln265_23_reg_1709 <= select_ln265_23_fu_1351_p3;
        select_ln265_24_reg_1715 <= select_ln265_24_fu_1375_p3;
        select_ln265_25_reg_1721 <= select_ln265_25_fu_1399_p3;
        select_ln265_26_reg_1727 <= select_ln265_26_fu_1423_p3;
        select_ln265_27_reg_1733 <= select_ln265_27_fu_1447_p3;
        select_ln265_28_reg_1739 <= select_ln265_28_fu_1471_p3;
        select_ln265_29_reg_1745 <= select_ln265_29_fu_1495_p3;
        select_ln265_2_reg_1583 <= select_ln265_2_fu_847_p3;
        select_ln265_3_reg_1589 <= select_ln265_3_fu_871_p3;
        select_ln265_4_reg_1595 <= select_ln265_4_fu_895_p3;
        select_ln265_5_reg_1601 <= select_ln265_5_fu_919_p3;
        select_ln265_6_reg_1607 <= select_ln265_6_fu_943_p3;
        select_ln265_7_reg_1613 <= select_ln265_7_fu_967_p3;
        select_ln265_8_reg_1619 <= select_ln265_8_fu_991_p3;
        select_ln265_9_reg_1625 <= select_ln265_9_fu_1015_p3;
        select_ln265_reg_1571 <= select_ln265_fu_799_p3;
    end
end

always @ (*) begin
    if ((icmp_ln254_fu_531_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_0_1_phi_fu_513_p4 = select_ln265_reg_1571;
    end else begin
        ap_phi_mux_buf_V_0_1_phi_fu_513_p4 = buf_V_0_1_reg_509;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_10_1_phi_fu_403_p4 = select_ln265_10_reg_1631;
    end else begin
        ap_phi_mux_buf_V_10_1_phi_fu_403_p4 = buf_V_10_1_reg_399;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_11_1_phi_fu_392_p4 = select_ln265_11_reg_1637;
    end else begin
        ap_phi_mux_buf_V_11_1_phi_fu_392_p4 = buf_V_11_1_reg_388;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_12_1_phi_fu_381_p4 = select_ln265_12_reg_1643;
    end else begin
        ap_phi_mux_buf_V_12_1_phi_fu_381_p4 = buf_V_12_1_reg_377;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_13_1_phi_fu_370_p4 = select_ln265_13_reg_1649;
    end else begin
        ap_phi_mux_buf_V_13_1_phi_fu_370_p4 = buf_V_13_1_reg_366;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_14_1_phi_fu_359_p4 = select_ln265_14_reg_1655;
    end else begin
        ap_phi_mux_buf_V_14_1_phi_fu_359_p4 = buf_V_14_1_reg_355;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_15_1_phi_fu_348_p4 = select_ln265_15_reg_1661;
    end else begin
        ap_phi_mux_buf_V_15_1_phi_fu_348_p4 = buf_V_15_1_reg_344;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_16_1_phi_fu_337_p4 = select_ln265_16_reg_1667;
    end else begin
        ap_phi_mux_buf_V_16_1_phi_fu_337_p4 = buf_V_16_1_reg_333;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_17_1_phi_fu_326_p4 = select_ln265_17_reg_1673;
    end else begin
        ap_phi_mux_buf_V_17_1_phi_fu_326_p4 = buf_V_17_1_reg_322;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_18_1_phi_fu_315_p4 = select_ln265_18_reg_1679;
    end else begin
        ap_phi_mux_buf_V_18_1_phi_fu_315_p4 = buf_V_18_1_reg_311;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_19_1_phi_fu_304_p4 = select_ln265_19_reg_1685;
    end else begin
        ap_phi_mux_buf_V_19_1_phi_fu_304_p4 = buf_V_19_1_reg_300;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_1_1_phi_fu_502_p4 = select_ln265_1_reg_1577;
    end else begin
        ap_phi_mux_buf_V_1_1_phi_fu_502_p4 = buf_V_1_1_reg_498;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_20_1_phi_fu_293_p4 = select_ln265_20_reg_1691;
    end else begin
        ap_phi_mux_buf_V_20_1_phi_fu_293_p4 = buf_V_20_1_reg_289;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_21_1_phi_fu_282_p4 = select_ln265_21_reg_1697;
    end else begin
        ap_phi_mux_buf_V_21_1_phi_fu_282_p4 = buf_V_21_1_reg_278;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_22_1_phi_fu_271_p4 = select_ln265_22_reg_1703;
    end else begin
        ap_phi_mux_buf_V_22_1_phi_fu_271_p4 = buf_V_22_1_reg_267;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_23_1_phi_fu_260_p4 = select_ln265_23_reg_1709;
    end else begin
        ap_phi_mux_buf_V_23_1_phi_fu_260_p4 = buf_V_23_1_reg_256;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_24_1_phi_fu_249_p4 = select_ln265_24_reg_1715;
    end else begin
        ap_phi_mux_buf_V_24_1_phi_fu_249_p4 = buf_V_24_1_reg_245;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_25_1_phi_fu_238_p4 = select_ln265_25_reg_1721;
    end else begin
        ap_phi_mux_buf_V_25_1_phi_fu_238_p4 = buf_V_25_1_reg_234;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_26_1_phi_fu_227_p4 = select_ln265_26_reg_1727;
    end else begin
        ap_phi_mux_buf_V_26_1_phi_fu_227_p4 = buf_V_26_1_reg_223;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_27_1_phi_fu_216_p4 = select_ln265_27_reg_1733;
    end else begin
        ap_phi_mux_buf_V_27_1_phi_fu_216_p4 = buf_V_27_1_reg_212;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_28_1_phi_fu_205_p4 = select_ln265_28_reg_1739;
    end else begin
        ap_phi_mux_buf_V_28_1_phi_fu_205_p4 = buf_V_28_1_reg_201;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_29_1_phi_fu_194_p4 = select_ln265_29_reg_1745;
    end else begin
        ap_phi_mux_buf_V_29_1_phi_fu_194_p4 = buf_V_29_1_reg_190;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_2_1_phi_fu_491_p4 = select_ln265_2_reg_1583;
    end else begin
        ap_phi_mux_buf_V_2_1_phi_fu_491_p4 = buf_V_2_1_reg_487;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_3_1_phi_fu_480_p4 = select_ln265_3_reg_1589;
    end else begin
        ap_phi_mux_buf_V_3_1_phi_fu_480_p4 = buf_V_3_1_reg_476;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_4_1_phi_fu_469_p4 = select_ln265_4_reg_1595;
    end else begin
        ap_phi_mux_buf_V_4_1_phi_fu_469_p4 = buf_V_4_1_reg_465;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_5_1_phi_fu_458_p4 = select_ln265_5_reg_1601;
    end else begin
        ap_phi_mux_buf_V_5_1_phi_fu_458_p4 = buf_V_5_1_reg_454;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_6_1_phi_fu_447_p4 = select_ln265_6_reg_1607;
    end else begin
        ap_phi_mux_buf_V_6_1_phi_fu_447_p4 = buf_V_6_1_reg_443;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_7_1_phi_fu_436_p4 = select_ln265_7_reg_1613;
    end else begin
        ap_phi_mux_buf_V_7_1_phi_fu_436_p4 = buf_V_7_1_reg_432;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_8_1_phi_fu_425_p4 = select_ln265_8_reg_1619;
    end else begin
        ap_phi_mux_buf_V_8_1_phi_fu_425_p4 = buf_V_8_1_reg_421;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_9_1_phi_fu_414_p4 = select_ln265_9_reg_1625;
    end else begin
        ap_phi_mux_buf_V_9_1_phi_fu_414_p4 = buf_V_9_1_reg_410;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1562 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_kx_0_phi_fu_524_p4 = kx_reg_1751;
    end else begin
        ap_phi_mux_kx_0_phi_fu_524_p4 = kx_0_reg_520;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln254_fu_531_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_TDATA_blk_n = in_V_V_TVALID;
    end else begin
        in_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln254_fu_531_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_TREADY = 1'b1;
    end else begin
        in_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln256_1_reg_1756 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_V_TDATA_blk_n = out_V_V_TREADY;
    end else begin
        out_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln256_1_reg_1756 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_TVALID = 1'b1;
    end else begin
        out_V_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln254_fu_531_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln254_fu_531_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln254_fu_537_p2 = (indvar_flatten_reg_179 + 5'd1);

assign add_ln256_fu_1503_p2 = (3'd1 + ap_phi_mux_kx_0_phi_fu_524_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln254_fu_531_p2 == 1'd0) & (in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((icmp_ln254_fu_531_p2 == 1'd0) & (in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((icmp_ln254_fu_531_p2 == 1'd0) & (in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln254_fu_531_p2 == 1'd0) & (in_V_V_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln256_1_reg_1756 == 1'd1) & (out_V_V_TREADY == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buf_0_V_fu_789_p1 = in_V_V_TDATA[1:0];

assign buf_10_V_fu_1023_p4 = {{in_V_V_TDATA[21:20]}};

assign buf_11_V_fu_1047_p4 = {{in_V_V_TDATA[23:22]}};

assign buf_12_V_fu_1071_p4 = {{in_V_V_TDATA[25:24]}};

assign buf_13_V_fu_1095_p4 = {{in_V_V_TDATA[27:26]}};

assign buf_14_V_fu_1119_p4 = {{in_V_V_TDATA[29:28]}};

assign buf_15_V_fu_1143_p4 = {{in_V_V_TDATA[31:30]}};

assign buf_16_V_fu_1167_p4 = {{in_V_V_TDATA[33:32]}};

assign buf_17_V_fu_1191_p4 = {{in_V_V_TDATA[35:34]}};

assign buf_18_V_fu_1215_p4 = {{in_V_V_TDATA[37:36]}};

assign buf_19_V_fu_1239_p4 = {{in_V_V_TDATA[39:38]}};

assign buf_1_V_fu_807_p4 = {{in_V_V_TDATA[3:2]}};

assign buf_20_V_fu_1263_p4 = {{in_V_V_TDATA[41:40]}};

assign buf_21_V_fu_1287_p4 = {{in_V_V_TDATA[43:42]}};

assign buf_22_V_fu_1311_p4 = {{in_V_V_TDATA[45:44]}};

assign buf_23_V_fu_1335_p4 = {{in_V_V_TDATA[47:46]}};

assign buf_24_V_fu_1359_p4 = {{in_V_V_TDATA[49:48]}};

assign buf_25_V_fu_1383_p4 = {{in_V_V_TDATA[51:50]}};

assign buf_26_V_fu_1407_p4 = {{in_V_V_TDATA[53:52]}};

assign buf_27_V_fu_1431_p4 = {{in_V_V_TDATA[55:54]}};

assign buf_28_V_fu_1455_p4 = {{in_V_V_TDATA[57:56]}};

assign buf_29_V_fu_1479_p4 = {{in_V_V_TDATA[59:58]}};

assign buf_2_V_fu_831_p4 = {{in_V_V_TDATA[5:4]}};

assign buf_3_V_fu_855_p4 = {{in_V_V_TDATA[7:6]}};

assign buf_4_V_fu_879_p4 = {{in_V_V_TDATA[9:8]}};

assign buf_5_V_fu_903_p4 = {{in_V_V_TDATA[11:10]}};

assign buf_6_V_fu_927_p4 = {{in_V_V_TDATA[13:12]}};

assign buf_7_V_fu_951_p4 = {{in_V_V_TDATA[15:14]}};

assign buf_8_V_fu_975_p4 = {{in_V_V_TDATA[17:16]}};

assign buf_9_V_fu_999_p4 = {{in_V_V_TDATA[19:18]}};

assign icmp_ln254_fu_531_p2 = ((indvar_flatten_reg_179 == 5'd30) ? 1'b1 : 1'b0);

assign icmp_ln256_1_fu_1517_p2 = ((kx_fu_1509_p3 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln256_fu_543_p2 = ((ap_phi_mux_kx_0_phi_fu_524_p4 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln895_10_fu_1033_p2 = ((buf_10_V_fu_1023_p4 > select_ln256_19_fu_701_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_11_fu_1057_p2 = ((buf_11_V_fu_1047_p4 > select_ln256_18_fu_693_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_12_fu_1081_p2 = ((buf_12_V_fu_1071_p4 > select_ln256_17_fu_685_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_13_fu_1105_p2 = ((buf_13_V_fu_1095_p4 > select_ln256_16_fu_677_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_14_fu_1129_p2 = ((buf_14_V_fu_1119_p4 > select_ln256_15_fu_669_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_15_fu_1153_p2 = ((buf_15_V_fu_1143_p4 > select_ln256_14_fu_661_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_16_fu_1177_p2 = ((buf_16_V_fu_1167_p4 > select_ln256_13_fu_653_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_17_fu_1201_p2 = ((buf_17_V_fu_1191_p4 > select_ln256_12_fu_645_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_18_fu_1225_p2 = ((buf_18_V_fu_1215_p4 > select_ln256_11_fu_637_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_19_fu_1249_p2 = ((buf_19_V_fu_1239_p4 > select_ln256_10_fu_629_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_817_p2 = ((buf_1_V_fu_807_p4 > select_ln256_28_fu_773_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_20_fu_1273_p2 = ((buf_20_V_fu_1263_p4 > select_ln256_9_fu_621_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_21_fu_1297_p2 = ((buf_21_V_fu_1287_p4 > select_ln256_8_fu_613_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_22_fu_1321_p2 = ((buf_22_V_fu_1311_p4 > select_ln256_7_fu_605_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_23_fu_1345_p2 = ((buf_23_V_fu_1335_p4 > select_ln256_6_fu_597_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_24_fu_1369_p2 = ((buf_24_V_fu_1359_p4 > select_ln256_5_fu_589_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_25_fu_1393_p2 = ((buf_25_V_fu_1383_p4 > select_ln256_4_fu_581_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_26_fu_1417_p2 = ((buf_26_V_fu_1407_p4 > select_ln256_3_fu_573_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_27_fu_1441_p2 = ((buf_27_V_fu_1431_p4 > select_ln256_2_fu_565_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_28_fu_1465_p2 = ((buf_28_V_fu_1455_p4 > select_ln256_1_fu_557_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_29_fu_1489_p2 = ((buf_29_V_fu_1479_p4 > select_ln256_fu_549_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_2_fu_841_p2 = ((buf_2_V_fu_831_p4 > select_ln256_27_fu_765_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_3_fu_865_p2 = ((buf_3_V_fu_855_p4 > select_ln256_26_fu_757_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_4_fu_889_p2 = ((buf_4_V_fu_879_p4 > select_ln256_25_fu_749_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_5_fu_913_p2 = ((buf_5_V_fu_903_p4 > select_ln256_24_fu_741_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_6_fu_937_p2 = ((buf_6_V_fu_927_p4 > select_ln256_23_fu_733_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_7_fu_961_p2 = ((buf_7_V_fu_951_p4 > select_ln256_22_fu_725_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_8_fu_985_p2 = ((buf_8_V_fu_975_p4 > select_ln256_21_fu_717_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_9_fu_1009_p2 = ((buf_9_V_fu_999_p4 > select_ln256_20_fu_709_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_793_p2 = ((buf_0_V_fu_789_p1 > select_ln256_29_fu_781_p3) ? 1'b1 : 1'b0);

assign kx_fu_1509_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 3'd1 : add_ln256_fu_1503_p2);

assign out_V_V_TDATA = tmp_V_fu_1523_p31;

assign select_ln256_10_fu_629_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_19_1_phi_fu_304_p4);

assign select_ln256_11_fu_637_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_18_1_phi_fu_315_p4);

assign select_ln256_12_fu_645_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_17_1_phi_fu_326_p4);

assign select_ln256_13_fu_653_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_16_1_phi_fu_337_p4);

assign select_ln256_14_fu_661_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_15_1_phi_fu_348_p4);

assign select_ln256_15_fu_669_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_14_1_phi_fu_359_p4);

assign select_ln256_16_fu_677_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_13_1_phi_fu_370_p4);

assign select_ln256_17_fu_685_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_12_1_phi_fu_381_p4);

assign select_ln256_18_fu_693_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_11_1_phi_fu_392_p4);

assign select_ln256_19_fu_701_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_10_1_phi_fu_403_p4);

assign select_ln256_1_fu_557_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_28_1_phi_fu_205_p4);

assign select_ln256_20_fu_709_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_9_1_phi_fu_414_p4);

assign select_ln256_21_fu_717_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_8_1_phi_fu_425_p4);

assign select_ln256_22_fu_725_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_7_1_phi_fu_436_p4);

assign select_ln256_23_fu_733_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_6_1_phi_fu_447_p4);

assign select_ln256_24_fu_741_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_5_1_phi_fu_458_p4);

assign select_ln256_25_fu_749_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_4_1_phi_fu_469_p4);

assign select_ln256_26_fu_757_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_3_1_phi_fu_480_p4);

assign select_ln256_27_fu_765_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_2_1_phi_fu_491_p4);

assign select_ln256_28_fu_773_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_1_1_phi_fu_502_p4);

assign select_ln256_29_fu_781_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_0_1_phi_fu_513_p4);

assign select_ln256_2_fu_565_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_27_1_phi_fu_216_p4);

assign select_ln256_3_fu_573_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_26_1_phi_fu_227_p4);

assign select_ln256_4_fu_581_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_25_1_phi_fu_238_p4);

assign select_ln256_5_fu_589_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_24_1_phi_fu_249_p4);

assign select_ln256_6_fu_597_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_23_1_phi_fu_260_p4);

assign select_ln256_7_fu_605_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_22_1_phi_fu_271_p4);

assign select_ln256_8_fu_613_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_21_1_phi_fu_282_p4);

assign select_ln256_9_fu_621_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_20_1_phi_fu_293_p4);

assign select_ln256_fu_549_p3 = ((icmp_ln256_fu_543_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_buf_V_29_1_phi_fu_194_p4);

assign select_ln265_10_fu_1039_p3 = ((icmp_ln895_10_fu_1033_p2[0:0] === 1'b1) ? buf_10_V_fu_1023_p4 : select_ln256_19_fu_701_p3);

assign select_ln265_11_fu_1063_p3 = ((icmp_ln895_11_fu_1057_p2[0:0] === 1'b1) ? buf_11_V_fu_1047_p4 : select_ln256_18_fu_693_p3);

assign select_ln265_12_fu_1087_p3 = ((icmp_ln895_12_fu_1081_p2[0:0] === 1'b1) ? buf_12_V_fu_1071_p4 : select_ln256_17_fu_685_p3);

assign select_ln265_13_fu_1111_p3 = ((icmp_ln895_13_fu_1105_p2[0:0] === 1'b1) ? buf_13_V_fu_1095_p4 : select_ln256_16_fu_677_p3);

assign select_ln265_14_fu_1135_p3 = ((icmp_ln895_14_fu_1129_p2[0:0] === 1'b1) ? buf_14_V_fu_1119_p4 : select_ln256_15_fu_669_p3);

assign select_ln265_15_fu_1159_p3 = ((icmp_ln895_15_fu_1153_p2[0:0] === 1'b1) ? buf_15_V_fu_1143_p4 : select_ln256_14_fu_661_p3);

assign select_ln265_16_fu_1183_p3 = ((icmp_ln895_16_fu_1177_p2[0:0] === 1'b1) ? buf_16_V_fu_1167_p4 : select_ln256_13_fu_653_p3);

assign select_ln265_17_fu_1207_p3 = ((icmp_ln895_17_fu_1201_p2[0:0] === 1'b1) ? buf_17_V_fu_1191_p4 : select_ln256_12_fu_645_p3);

assign select_ln265_18_fu_1231_p3 = ((icmp_ln895_18_fu_1225_p2[0:0] === 1'b1) ? buf_18_V_fu_1215_p4 : select_ln256_11_fu_637_p3);

assign select_ln265_19_fu_1255_p3 = ((icmp_ln895_19_fu_1249_p2[0:0] === 1'b1) ? buf_19_V_fu_1239_p4 : select_ln256_10_fu_629_p3);

assign select_ln265_1_fu_823_p3 = ((icmp_ln895_1_fu_817_p2[0:0] === 1'b1) ? buf_1_V_fu_807_p4 : select_ln256_28_fu_773_p3);

assign select_ln265_20_fu_1279_p3 = ((icmp_ln895_20_fu_1273_p2[0:0] === 1'b1) ? buf_20_V_fu_1263_p4 : select_ln256_9_fu_621_p3);

assign select_ln265_21_fu_1303_p3 = ((icmp_ln895_21_fu_1297_p2[0:0] === 1'b1) ? buf_21_V_fu_1287_p4 : select_ln256_8_fu_613_p3);

assign select_ln265_22_fu_1327_p3 = ((icmp_ln895_22_fu_1321_p2[0:0] === 1'b1) ? buf_22_V_fu_1311_p4 : select_ln256_7_fu_605_p3);

assign select_ln265_23_fu_1351_p3 = ((icmp_ln895_23_fu_1345_p2[0:0] === 1'b1) ? buf_23_V_fu_1335_p4 : select_ln256_6_fu_597_p3);

assign select_ln265_24_fu_1375_p3 = ((icmp_ln895_24_fu_1369_p2[0:0] === 1'b1) ? buf_24_V_fu_1359_p4 : select_ln256_5_fu_589_p3);

assign select_ln265_25_fu_1399_p3 = ((icmp_ln895_25_fu_1393_p2[0:0] === 1'b1) ? buf_25_V_fu_1383_p4 : select_ln256_4_fu_581_p3);

assign select_ln265_26_fu_1423_p3 = ((icmp_ln895_26_fu_1417_p2[0:0] === 1'b1) ? buf_26_V_fu_1407_p4 : select_ln256_3_fu_573_p3);

assign select_ln265_27_fu_1447_p3 = ((icmp_ln895_27_fu_1441_p2[0:0] === 1'b1) ? buf_27_V_fu_1431_p4 : select_ln256_2_fu_565_p3);

assign select_ln265_28_fu_1471_p3 = ((icmp_ln895_28_fu_1465_p2[0:0] === 1'b1) ? buf_28_V_fu_1455_p4 : select_ln256_1_fu_557_p3);

assign select_ln265_29_fu_1495_p3 = ((icmp_ln895_29_fu_1489_p2[0:0] === 1'b1) ? buf_29_V_fu_1479_p4 : select_ln256_fu_549_p3);

assign select_ln265_2_fu_847_p3 = ((icmp_ln895_2_fu_841_p2[0:0] === 1'b1) ? buf_2_V_fu_831_p4 : select_ln256_27_fu_765_p3);

assign select_ln265_3_fu_871_p3 = ((icmp_ln895_3_fu_865_p2[0:0] === 1'b1) ? buf_3_V_fu_855_p4 : select_ln256_26_fu_757_p3);

assign select_ln265_4_fu_895_p3 = ((icmp_ln895_4_fu_889_p2[0:0] === 1'b1) ? buf_4_V_fu_879_p4 : select_ln256_25_fu_749_p3);

assign select_ln265_5_fu_919_p3 = ((icmp_ln895_5_fu_913_p2[0:0] === 1'b1) ? buf_5_V_fu_903_p4 : select_ln256_24_fu_741_p3);

assign select_ln265_6_fu_943_p3 = ((icmp_ln895_6_fu_937_p2[0:0] === 1'b1) ? buf_6_V_fu_927_p4 : select_ln256_23_fu_733_p3);

assign select_ln265_7_fu_967_p3 = ((icmp_ln895_7_fu_961_p2[0:0] === 1'b1) ? buf_7_V_fu_951_p4 : select_ln256_22_fu_725_p3);

assign select_ln265_8_fu_991_p3 = ((icmp_ln895_8_fu_985_p2[0:0] === 1'b1) ? buf_8_V_fu_975_p4 : select_ln256_21_fu_717_p3);

assign select_ln265_9_fu_1015_p3 = ((icmp_ln895_9_fu_1009_p2[0:0] === 1'b1) ? buf_9_V_fu_999_p4 : select_ln256_20_fu_709_p3);

assign select_ln265_fu_799_p3 = ((icmp_ln895_fu_793_p2[0:0] === 1'b1) ? buf_0_V_fu_789_p1 : select_ln256_29_fu_781_p3);

assign tmp_V_fu_1523_p31 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{select_ln265_29_reg_1745}, {select_ln265_28_reg_1739}}, {select_ln265_27_reg_1733}}, {select_ln265_26_reg_1727}}, {select_ln265_25_reg_1721}}, {select_ln265_24_reg_1715}}, {select_ln265_23_reg_1709}}, {select_ln265_22_reg_1703}}, {select_ln265_21_reg_1697}}, {select_ln265_20_reg_1691}}, {select_ln265_19_reg_1685}}, {select_ln265_18_reg_1679}}, {select_ln265_17_reg_1673}}, {select_ln265_16_reg_1667}}, {select_ln265_15_reg_1661}}, {select_ln265_14_reg_1655}}, {select_ln265_13_reg_1649}}, {select_ln265_12_reg_1643}}, {select_ln265_11_reg_1637}}, {select_ln265_10_reg_1631}}, {select_ln265_9_reg_1625}}, {select_ln265_8_reg_1619}}, {select_ln265_7_reg_1613}}, {select_ln265_6_reg_1607}}, {select_ln265_5_reg_1601}}, {select_ln265_4_reg_1595}}, {select_ln265_3_reg_1589}}, {select_ln265_2_reg_1583}}, {select_ln265_1_reg_1577}}, {select_ln265_reg_1571}};

endmodule //StreamingMaxPool_Batch_2_StreamingMaxPool_Pre
