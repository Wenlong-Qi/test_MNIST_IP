// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FMPadding_Batch_0_FMPadding (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_V_TDATA,
        in_V_V_TVALID,
        in_V_V_TREADY,
        out_V_V_TDATA,
        out_V_V_TVALID,
        out_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] in_V_V_TDATA;
input   in_V_V_TVALID;
output   in_V_V_TREADY;
output  [7:0] out_V_V_TDATA;
output   out_V_V_TVALID;
input   out_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_V_TREADY;
reg out_V_V_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln279_fu_111_p2;
wire   [0:0] empty_14_fu_187_p2;
wire   [0:0] empty_5_fu_217_p2;
reg    out_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln279_reg_229;
reg   [9:0] indvar_flatten_reg_63;
reg   [4:0] y_0_reg_74;
reg   [4:0] x_0_reg_85;
reg    ap_predicate_op32_read_state2;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln279_fu_117_p2;
wire   [4:0] select_ln279_fu_143_p3;
reg   [4:0] select_ln279_reg_238;
wire   [4:0] x_fu_223_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [4:0] ap_phi_mux_y_0_phi_fu_78_p4;
wire   [7:0] ap_phi_reg_pp0_iter0_tmp_V_reg_96;
reg   [7:0] ap_phi_reg_pp0_iter1_tmp_V_reg_96;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln280_fu_123_p2;
wire   [4:0] add_ln279_1_fu_137_p2;
wire   [0:0] empty_9_fu_157_p2;
wire   [0:0] empty_8_fu_151_p2;
wire   [0:0] empty_11_fu_169_p2;
wire   [0:0] empty_10_fu_163_p2;
wire   [0:0] empty_13_fu_181_p2;
wire   [0:0] empty_12_fu_175_p2;
wire   [4:0] select_ln280_fu_129_p3;
wire   [0:0] empty_2_fu_199_p2;
wire   [0:0] empty_fu_193_p2;
wire   [0:0] empty_4_fu_211_p2;
wire   [0:0] empty_3_fu_205_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (empty_14_fu_187_p2 == 1'd1) & (icmp_ln279_fu_111_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (empty_5_fu_217_p2 == 1'd1) & (empty_14_fu_187_p2 == 1'd0) & (icmp_ln279_fu_111_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_phi_reg_pp0_iter1_tmp_V_reg_96 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_5_fu_217_p2 == 1'd0) & (empty_14_fu_187_p2 == 1'd0) & (icmp_ln279_fu_111_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_tmp_V_reg_96 <= in_V_V_TDATA;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_tmp_V_reg_96 <= ap_phi_reg_pp0_iter0_tmp_V_reg_96;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln279_fu_111_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_63 <= add_ln279_fu_117_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_63 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln279_fu_111_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_0_reg_85 <= x_fu_223_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_reg_85 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln279_reg_229 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_0_reg_74 <= select_ln279_reg_238;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_0_reg_74 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln279_reg_229 <= icmp_ln279_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln279_fu_111_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln279_reg_238 <= select_ln279_fu_143_p3;
    end
end

always @ (*) begin
    if ((icmp_ln279_fu_111_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln279_reg_229 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_y_0_phi_fu_78_p4 = select_ln279_reg_238;
    end else begin
        ap_phi_mux_y_0_phi_fu_78_p4 = y_0_reg_74;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((empty_5_fu_217_p2 == 1'd0) & (empty_14_fu_187_p2 == 1'd0) & (icmp_ln279_fu_111_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_TDATA_blk_n = in_V_V_TVALID;
    end else begin
        in_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op32_read_state2 == 1'b1))) begin
        in_V_V_TREADY = 1'b1;
    end else begin
        in_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln279_reg_229 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_V_TDATA_blk_n = out_V_V_TREADY;
    end else begin
        out_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln279_reg_229 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_V_TVALID = 1'b1;
    end else begin
        out_V_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln279_fu_111_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln279_fu_111_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln279_1_fu_137_p2 = (ap_phi_mux_y_0_phi_fu_78_p4 + 5'd1);

assign add_ln279_fu_117_p2 = (indvar_flatten_reg_63 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op32_read_state2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op32_read_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op32_read_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((in_V_V_TVALID == 1'b0) & (ap_predicate_op32_read_state2 == 1'b1));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln279_reg_229 == 1'd0) & (out_V_V_TREADY == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_tmp_V_reg_96 = 'bx;

always @ (*) begin
    ap_predicate_op32_read_state2 = ((empty_5_fu_217_p2 == 1'd0) & (empty_14_fu_187_p2 == 1'd0) & (icmp_ln279_fu_111_p2 == 1'd0));
end

assign empty_10_fu_163_p2 = (empty_9_fu_157_p2 | empty_8_fu_151_p2);

assign empty_11_fu_169_p2 = ((select_ln279_fu_143_p3 == 5'd29) ? 1'b1 : 1'b0);

assign empty_12_fu_175_p2 = (empty_11_fu_169_p2 | empty_10_fu_163_p2);

assign empty_13_fu_181_p2 = ((select_ln279_fu_143_p3 == 5'd0) ? 1'b1 : 1'b0);

assign empty_14_fu_187_p2 = (empty_13_fu_181_p2 | empty_12_fu_175_p2);

assign empty_2_fu_199_p2 = ((select_ln280_fu_129_p3 == 5'd29) ? 1'b1 : 1'b0);

assign empty_3_fu_205_p2 = (empty_fu_193_p2 | empty_2_fu_199_p2);

assign empty_4_fu_211_p2 = ((select_ln280_fu_129_p3 == 5'd0) ? 1'b1 : 1'b0);

assign empty_5_fu_217_p2 = (empty_4_fu_211_p2 | empty_3_fu_205_p2);

assign empty_8_fu_151_p2 = ((select_ln279_fu_143_p3 == 5'd31) ? 1'b1 : 1'b0);

assign empty_9_fu_157_p2 = ((select_ln279_fu_143_p3 == 5'd30) ? 1'b1 : 1'b0);

assign empty_fu_193_p2 = ((select_ln280_fu_129_p3 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln279_fu_111_p2 = ((indvar_flatten_reg_63 == 10'd900) ? 1'b1 : 1'b0);

assign icmp_ln280_fu_123_p2 = ((x_0_reg_85 == 5'd30) ? 1'b1 : 1'b0);

assign out_V_V_TDATA = ap_phi_reg_pp0_iter1_tmp_V_reg_96;

assign select_ln279_fu_143_p3 = ((icmp_ln280_fu_123_p2[0:0] === 1'b1) ? add_ln279_1_fu_137_p2 : ap_phi_mux_y_0_phi_fu_78_p4);

assign select_ln280_fu_129_p3 = ((icmp_ln280_fu_123_p2[0:0] === 1'b1) ? 5'd0 : x_0_reg_85);

assign x_fu_223_p2 = (select_ln280_fu_129_p3 + 5'd1);

endmodule //FMPadding_Batch_0_FMPadding
